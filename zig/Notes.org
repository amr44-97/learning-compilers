#+title: Notes

Reading files with Sentinel
#+begin_src zig
pub fn read_file(allocator: Allocator, name: []const u8) ![:0]const u8 {
    var f = try fs.cwd().openFile(name, .{});
    defer f.close();
    const stat = try f.stat();
    const buffer = try allocator.allocSentinel(u8, stat.size, 0);
    const sf = try f.readAll(buffer);
    if (sf != stat.size) {
        fatal("failed to read file", .{});
    }
    return buffer;
}
#+end_src

Handling utf8 source files as arabic
#+begin_src zig
pub const Source = struct {
    codepoints: []u21,
    codepoint_slices: [][]const u8,
};
pub fn ascii_to_utf8(source : []const u8) !Source {
      const view = try unicode.Utf8View.init(source);
        var iterator = view.iterator();
        const code_len = try unicode.utf8CountCodepoints(source);
        var codepoints = try std.ArrayList(u21).initCapacity(allocator, code_len);
        var codepoint_slices = try std.ArrayList([]const u8).initCapacity(allocator, code_len);
        while (iterator.nextCodepointSlice()) |codepoint| {
            try codepoint_slices.append(codepoint);
            const b = try unicode.utf8Decode(codepoint);
            try codepoints.append(b);
        }

    return .{
         .codepoints  = codepoints.items;
         .codepoint_slices = codepoint_slices.items;
          };
}
#+end_src
